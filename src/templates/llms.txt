# unpkg.ai - AI-powered ESM module generation service

## Overview
unpkg.ai generates and serves ES modules dynamically based on URL-encoded prompts. Include full TypeScript-style type definitions in your prompts to get modules with precise JSDoc annotations.

## API Endpoints

### Generate ES Module
GET /esm/{url-encoded-prompt}.js

Parameters:
- model: AI model to use (optional, default: gpt-4)
- seed: Random seed for deterministic output (optional)

### Health Check
GET /health

### LLM Documentation
GET /llms.txt

## Prompt Syntax

### Function Signatures
functionName(param1:type1,param2%3F:type2):ReturnType

### Object Types
{property1:type1,property2%3F:type2}

### Union Types
(param:string|number):boolean

### Array Types
param:array
param:{foo:string,bar:number}[]

### Documentation with Types
For complex modules that need detailed documentation, append documentation after the type signature using |:
functionName(param:type):ReturnType|Your documentation here describing the module behavior

### Special Characters
- Use %3F for optional parameters (?)
- Use + for spaces in multi-word names
- Use standard URL encoding for special characters

## Examples

### Currency formatter with full typedef
https://unpkg.ai/esm/formatCurrency(amount:number,currency%3F:string):string.js

### User fetcher with complex types
https://unpkg.ai/esm/fetchUser(userId:number,options%3F:{includeProfile%3F:boolean,timeout%3F:number}):Promise<{id:number,name:string,email:string,createdAt:Date}>.js

### React component with typed props
https://unpkg.ai/esm/LoadingSpinner(props:{size:number,color:string,isVisible:boolean}):JSX.Element.js

### Array utilities
https://unpkg.ai/esm/chunk(array,size):array.js

### API client
https://unpkg.ai/esm/createApiClient(config):object.js

## Complex Frontend Examples

### Advanced form validator with real-time feedback
https://unpkg.ai/esm/createFormValidator(config:{fields:{[key:string]:{required%3F:boolean,minLength%3F:number,pattern%3F:RegExp,validator%3F:(value:string)=>Promise<boolean>}},realTime%3F:boolean}):Promise<{validate:(formData:FormData)=>Promise<{isValid:boolean,errors:{[field:string]:string[]}}>,attachToForm:(form:HTMLFormElement)=>void,onFieldChange:(callback:(field:string,isValid:boolean,errors:string[])=>void)=>void}>.js

### Drag and drop file uploader with progress tracking
https://unpkg.ai/esm/createFileUploader(config:{endpoint:string,maxFileSize%3F:number,allowedTypes%3F:string[],multiple%3F:boolean,chunkSize%3F:number}):Promise<{attachTo:(element:HTMLElement)=>void,upload:(files:FileList)=>Promise<{success:boolean,results:{file:string,url%3F:string,error%3F:string}[]}>,onProgress:(callback:(file:string,percent:number)=>void)=>void}>.js

### Rich text editor with markdown support
https://unpkg.ai/esm/createRichEditor(config:{container:string,features%3F:string[],theme%3F:string,plugins%3F:string[],autoSave%3F:boolean}):Promise<{getContent:()=>string,setContent:(content:string)=>void,insertText:(text:string)=>void,onContentChange:(callback:(content:string,wordCount:number)=>void)=>void,exportAs:(format:'html'|'markdown'|'pdf')=>Promise<string|Blob>}>.js

### Interactive data visualization dashboard
https://unpkg.ai/esm/createDashboard(config:{container:string,layout%3F:string,responsive%3F:boolean}):Promise<{addChart:(id:string,type:string,data:any[],options%3F:any)=>void,updateChart:(id:string,data:any[])=>void,addFilter:(name:string,type:string,values:any[])=>void,onFilterChange:(callback:(filters:any)=>void)=>void,exportDashboard:(format:'png'|'pdf')=>Promise<Blob>}>.js

## Usage in Code

```javascript
import { formatCurrency } from 'https://unpkg.ai/esm/formatCurrency(amount:number,currency%3F:string):string.js';
console.log(formatCurrency(1234.56, 'EUR')); // "â‚¬1,234.56"
```

```javascript
import { fetchUser } from 'https://unpkg.ai/esm/fetchUser(userId:number,options%3F:{includeProfile%3F:boolean,timeout%3F:number}):Promise<{id:number,name:string,email:string,createdAt:Date}>.js';
const user = await fetchUser(123, { includeProfile: true, timeout: 5000 });
```

```javascript
import { LoadingSpinner } from 'https://unpkg.ai/esm/LoadingSpinner(props:{size:number,color:string,isVisible:boolean}):JSX.Element.js';
return <LoadingSpinner size={24} color="blue" isVisible={loading} />;
```

```javascript
import { chunk } from 'https://unpkg.ai/esm/chunk(array,size):array.js';
const numbers = [1, 2, 3, 4, 5, 6];
const chunked = chunk(numbers, 2); // [[1, 2], [3, 4], [5, 6]]
```

```javascript
import { createApiClient } from 'https://unpkg.ai/esm/createApiClient(config):object.js';
const api = createApiClient({ 
  baseUrl: 'https://api.example.com', 
  apiKey: 'key123' 
});
```

## Features
- Permanent caching - Generated modules cached indefinitely
- TypeScript integration via JSDoc annotations
- CDN-ready with long cache headers
- Support for complex type signatures
- Deterministic output with seed parameter

## Response Format
Generated modules include precise JSDoc type annotations based on the TypeScript-style signatures in the prompt.

## Architecture
- Express/Hono server with /esm/* routing
- Module generation with TypeScript signature parsing
- Pollinations.ai API integration
- PostgreSQL caching layer